What are JDK, JRE and JVM? It should be in your own words and not more than two unambiguous sentences for each.
  JDK is a platform for Java and is a Java compiler. It stands for Java Development Kit (JDK) includes tools for useful for developing and testing   programs that are written in Java.JRE which stands for Java Runtime Environment includes resources that Java specifically needs to run and work.   It consists of class libraries, loader class, and the JVM and it will not run if the JRE isn't present. JVM stands for Java Virtual Machine which is an engine that has a runtime environment to drive the applications or code in Java. Basically it converts Java bytecode into machine language.
  
What is the relation between the three (JDK, JRE, JVM)? How is Java code executed in a Java program. Explain by assuming that the program was written on one platform (e.g., Windows) and executed on another (e.g., Linux). Small paragraph of 6-9 sentences.
  All three work together to allow Java to work efficiently. JDK is the software development kit while JRE is a software bundle allowing the program to run and JVM is is an environment for executing bytecode. Java code executed in a Java program involves two steps; one being the code written in a compiler and then the second being a virtual machine, JVM. In the first stage of compilation, the java file is passed through the compiler and encodes the source code into a machine independent encoding (Bytecode). Each class in a source file is stored in a separate class file. The class files generated by the compiler and can run on any system so the file goes to the JVM. In the JVM it goes through the class loader, where the main class is loaded into the memory and a class loader creates a space of class bodies which are referenced by a string name. Then after the bytecode of a class is loaded by the class loader, it goes through the bytecode verifier which checks that the instructions are good and aren't invalid/bad. If it doesn't pass this stage, the verifier doesn't allow the class to load. The last stage is converting the loaded bytecode into machine code. 

With the help of the code for Hello World program in Java (you can copy code with citation), explain when this program needs JDK (and not JRE and JVM), JRE (and not JVM) and JVM.
The following code is for Hello World program in Java:
  public class HelloWorld {
     public static void main(String[] args) {
          System.out.println("Hello world!");
     }
  }
  When this code is put into a compiler, it is using JDK, which has the tools, executables, and binaries needed to compile/debug/execute a Java Program. It is used the whole time because without it, a program won't compile. JVM is responsible for converting the bytecode to machine code and stores the classes in its memory. When the code is run and storing its classes in memory, it uses the JVM. It goes through the JVM to ensure the code is good and viable. This code would be checked and see there are no errors so it can be compiled. The JRE doesn't use the compiler/debugger but allows the program to execute thus it prints Hello World. 

Modify the document at least twice each person to make it better and show your competency to do version control using github.

Nontrivial Question: If a Java code does not pass through the JVM (let's say the code is invalid), does it go back through all of the stages or does it loop just through the JVM again and again?



Note: I wasn't able to find my partners Github and couldn't get in contact, however I understand how to add people to my Github and edit files.
